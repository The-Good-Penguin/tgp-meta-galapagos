#
# Copyright (c) 2024 The Good Penguin Ltd
#
# SPDX-License-Identifier: MIT
#
LAYER_INFO_JSON_NAME ?= "${IMAGE_NAME}${IMAGE_NAME_SUFFIX}-layersinfo.json"
LAYER_INFO_JSON_PATH ?= "${IMGDEPLOYDIR}/${IMAGE_NAME}${IMAGE_NAME_SUFFIX}-layersinfo.json"

# force cve json format on as it defaults off on really old versions
CVE_CHECK_FORMAT_JSON = "1"

def check_galapagos_recipe(d):
    recipe_name = d.getVar("GALAPAGOS_RECIPE_NAME");
    if not recipe_name:
        # No recipe name specified so fall back to backwards compatible
        # option of running on every recipe with a do_build
        return True;

    pn = d.getVar("PN");
    return pn == recipe_name

python do_galapagos_layer_info () {
    import json
    import os
    import sys

    if not check_galapagos_recipe(d):
        return;

    if not d.getVar('IMAGE_NAME'):
        bb.fatal("galapagos-cve-check should only be included in image builds")

    sys.path.append(d.getVar('GALAPAGOS_LAYERDIR')+"/lib")
    import gal_buildcfg

    layerinfo_name = d.getVar('LAYER_INFO_JSON_NAME')
    layerinfo_path = d.getVar('LAYER_INFO_JSON_PATH')

    layers_list = layers = (d.getVar("BBLAYERS") or "").split()
    layers_names = d.getVar('BBFILE_COLLECTIONS')

    layers_dict = {}
    layers_dict['layers'] = {}

    for layer in layers_list:
        layername=os.path.basename(layer)
        layers_dict['layers'][layername]={}

        remotes=gal_buildcfg.get_metadata_remotes(layer)

        branch=gal_buildcfg.get_metadata_branch(layer)
        revision=gal_buildcfg.get_metadata_revision(layer)
        tags=gal_buildcfg.get_metadata_describe(layer)

        remote_url = []
        for remote in remotes:
            remote_url.append(gal_buildcfg.get_metadata_remote_url(layer, remote))

        layers_dict['layers'][layername]['url']=remote_url
        layers_dict['layers'][layername]['branch']=branch
        layers_dict['layers'][layername]['revision']=revision
        if tags:
            layers_dict['layers'][layername]['tags']=tags

    with open(layerinfo_path, 'w') as f:
        json.dump(layers_dict, f, indent=4)
}

python do_galapagos_upload () {
    def obtain_kernel_config():
        kernel_pkg = d.getVar('PREFERRED_PROVIDER_virtual/kernel')
        if not kernel_pkg:
            return None
        kernel_dir = d.getVar('STAGING_KERNEL_BUILDDIR')
        if not kernel_dir:
            return None
        config = os.path.join(kernel_dir, ".config")
        if not os.path.exists(config):
            return None

        return config

    if not check_galapagos_recipe(d):
        return;

    layerinfo_path = d.getVar('LAYER_INFO_JSON_PATH')
    manifest_path = d.getVar('CVE_CHECK_MANIFEST_JSON')
    manifest_name = os.path.basename(manifest_path)
    layer_dir = d.getVar('GALAPAGOS_LAYERDIR')

    product_name = d.getVar('GALAPAGOS_PRODUCT_NAME')
    product_key = d.getVar('GALAPAGOS_PRODUCT_KEY')
    email = d.getVar('GALAPAGOS_REPORT_EMAIL')
    interval = d.getVar('GALAPAGOS_REPORT_INTERVAL')
    cve_severity_threshold = d.getVar('GALAPAGOS_CVE_SEVERITY_THRESHOLD')
    ignored_attack_vectors = d.getVar('GALAPAGOS_IGNORED_ATTACK_VECTORS')

    if product_name is None:
        bb.error("Please set GALAPAGOS_PRODUCT_NAME in your local.conf")

    if product_key is None:
        bb.error("Please set GALAPAGOS_PRODUCT_KEY in your local.conf")

    if email is None:
        bb.error("Please set GALAPAGOS_REPORT_EMAIL in your local.conf")

    if not interval in ("build", "daily", "weekly"):
        bb.error("Please set GALAPAGOS_REPORT_INTERVAL in your local.conf to build, daily or weekly")
        return

    if not all((product_name, product_key, email, interval)):
        return

    if not os.path.isfile(manifest_path):
        bb.error(f"CVE manifest '{manifest_path}' not found")
        return

    config = obtain_kernel_config()
    config_args = ""
    config_desc = ""
    if config is None:
        bb.warn("Unable to find kernel config to share with Galapagos")
    else:
        config_args = f"--kernel_config {config} "
        config_desc = f" and {config}"

    layer_config = None if not os.path.isfile(layerinfo_path) else layerinfo_path
    layer_config_args = ""
    layer_config_desc = ""
    if layer_config is None:
        bb.warn("Unable to find layers config to share with Galapagos")
    else:
        layer_config_args = f"--layers_config {layer_config} "
        layer_config_desc = f" and {layer_config}"

    cve_severity_threshold_args = ""
    if cve_severity_threshold is not None:
        cve_severity_threshold_args = f"--cve_severity_threshold {cve_severity_threshold}"
    
    ignored_attack_vectors_args = ""
    if ignored_attack_vectors is not None:
        ignored_attack_vectors_args = f"--ignored_attack_vectors \"{ignored_attack_vectors}\""


    try:
        bb.plain(f"Uploading {manifest_name}{config_desc}{layer_config_desc} to Galapagos")
        bb.process.run(f"{layer_dir}/scripts/send-galapagos-yocto-cves.py {manifest_path} \
                         \"{product_name}\" \"{product_key}\" \"{email}\" \"{interval}\" \
                         {config_args} {layer_config_args} \
                         {ignored_attack_vectors_args} {cve_severity_threshold_args}")
    except bb.process.CmdError as exc:
        bb.warn(f"Failed to upload CVE manifest")
        return
}

addtask do_galapagos_upload before do_rm_work do_build after do_image_complete
addtask do_galapagos_layer_info before do_galapagos_upload do_rm_work do_build after do_image_complete
do_galapagos_upload[network] = "1"
do_galapagos_upload[nostamp] = "1"
do_galapagos_upload[depends] += "python3-requests-native:do_populate_sysroot virtual/kernel:do_shared_workdir"
do_galapagos_layer_info[nostamp] = "1"
do_galapagos_layer_info[depends] += "python3-requests-native:do_populate_sysroot virtual/kernel:do_shared_workdir"

